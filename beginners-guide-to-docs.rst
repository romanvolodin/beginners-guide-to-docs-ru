Гид для новичков по написанию документации
==========================================

.. note:: Это расшифровка `презентации <https://speakerdeck.com/ericholscher/writing-docs-a-beginners-guide-to-writing-documentation>`_ .
          Обратную связь отправляйте сюда - `@ericholscher`_.
          Исходники можно посмотреть на `GitHub`_.

.. _@ericholscher: http://twitter.com/ericholscher
.. _GitHub: https://github.com/writethedocs/www/blob/master/docs/guide/writing/beginners-guide-to-docs.rst

..

	| Камера панорамирует слева направо.
	| Мы видим текстовый редактор с открытой пустой страницей.
	| Перед ней сгорбился человек, опустив голову.

Сцена выше хорошо знакома всем кто зарабатывает текстами на жизнь. Пустая страница вызывает смешанные чувства. Они полны предвкушения, свежести нового проекта. А ещё полны отчаяния,  растерянности - с чего начать?

Я здесь чтобы остановить эту сцену.

Это гид по документированию вашего первого проекта. Первый раз всегда самый трудный. Я надеюсь, что этот гид направит вас на верный путь. По окончании у вас будет проект, готовый к публичному релизу.

Этот документ можно читать по порядку, а можно использовать как справочник.

.. _why:

Зачем писать документацию
-------------------------

Вы будете пользоваться своим кодом через полгода
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Код, написанный вами 6 месяцев назад, часто неотличим от кода, написанного кем-то другим. Вы будете смотреть на код с любовью и нежностью. Зачем появится ощущение, понимание, что это всё написал кто-то менее опытный, менее мудрый.

Самоотверженно распутывая вещи, казавшийся очевидными или гениальными еще несколько месяцев назад, вы начнете сопереживать своим пользователям. Если бы я только записал почему я так сделал. Жизнь была бы куда проще. Документация позволяет передать это "почему". Как комментарии в коде объясняют "почему", а не "как", документация служет этой же цели.

.. sidebar::  Замечание об open source

	Есть волшебное чувство, которое возникает каждый раз, когда вы выпускаете в мир свой код. Возникает по-разному, но бьет одинаково. *Кто-то пользуется моим кодом?!* Смесь ужаса и радости.

		| Я сделал что-то полезное!
		| А если всё сломается?!
		| Я настоящий опенсорс разработчик!
		| О божечки, моим кодом пользуется кто-то ещё...

	Написание хорошей документации поможет смягчить страхи. Большая часть страха появляется, когда выпускаешь что-то в мир. Моя любимая цитата по этому поводу звучит как-то так:

		| Страх - это то, что появляется когда ты делаешь что-то важное.
		| Если ты делаешь дело которое тебе не пугает,
		| значит оно не сделает тебя или мир лучше.

	Поздравляю со страхом!
	Это значит, что вы делаете что-то важное.

Вы хотите, чтобы люди использовали ваш код
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Вы написали кусок кода и выпустили его в мир. Вы сделали это потому, что думаете, что кому-то он окажется полезен. Однако, людям надо понимать как ваш код может быть полезен, прежде, чем они решат использовать его. Документация расскажет людям, что этот проект именно то, что им нужно.

	| Если люди не знают почему существует ваш проект - они не будут им пользоваться.
	| Если люди не могут разобраться как установить ваш проект - они не будут им  пользоваться.
	| Если люди не могут разобраться как пользоваться вашим проектом - они не будут им пользоваться.

Есть очень малое число людей, которые залезут в исходники и будут использовать любой код. Это число исчезающе мало по сравнению с количеством людей, которые будут пользоваться кодом когда он правильно задокументирован. Если вы действительно любите ваш проект - задокументируйте его и позвольте другим людям пользоваться им.


Вы хотите, чтобы люди помогли
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Open source волшебная штука, да? Вы релизите ваш код и волшебные гномы-программисты делают его лучше.

Не совсем.

Есть много причин почему open source - это здорово. Но они не существуют вне законов физики. Чтобы совершить работу надо приложить силу.

	| Контрибуторы появится только когда вы вложите кучу сил.
	| Контрибуторы появится только когда появятся пользователи.
	| Контрибуторы появится только когда у вас будет документация.

Документация также предоставляет платформу для первых клнтрибуторов. Многие люди никогда не вносили свой вклад в чужие проекты, и менять документацию гораздо менее страшно, чем менять код. Если у вас нет документации, вы упускает целый пласт контрибуторов.

Вы хотите, чтобы ваш код стал лучше
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Очень просто иметь гениальную идею, когда она в голове, но процесс перекладывания слов на бумагу требует дистилляции мыслей, а это может быть совсем не просто.

Написание документации улучшает дизайн кода. 
Разговор через API и дизайнерские решения на бумаге позволит думать о них более формализованно. Как приятный побочный эффект, это позволит людям контрибутить код, который также следует изначальным идеям.

Вы хотите быть лучше как технический писатель
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Написание документации отличается от других форм писательства, с которыми сталкиваются большинство людей. Техническое писательство это искусство, которое не приходит само по себе. Написание документации направит вас по пути ведущему к становлению хорошим техписом, что является полезным навыком для программиста.

Писательство также становится проще со временем. Если вы не писали много месяцев, начинать заново гораздо труднее. Поддерживая документацию к проекту вы будете поддерживать скил писательства на необходимом уровне.

Лучший способ достичь реальных результатов - начать с простого. Я покажу проторенную дорожку, и, когда вы ухватите суть, вы расширите свой скоуп (не смог подобрать синонима). Инструменты должны быть простыми и мощными. Это устраняет препятствия при переносе слов на страницу.

.. _markup_languages:

.. sidebar:: Замечание о языках разметки.

   Примеры в этом документе валидны и на языке `Markdown`_, и на `reStructuredText`_.
   reStructuredText чуть сложнее использовать, но он более мощный.
   Я рекомендую попробовать оба языка и выбрать, какой больше нравится.

.. _reStructuredText: http://sphinx-doc.org/rest.html#rst-primer
.. _Markdown: http://daringfireball.net/projects/markdown/

Простой текст под версионным контролем
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Мы, как программисты, живём в мире простого текста. Наши инструменты документирования не должны быть исключением. Нам нужен инструмент, который превратит простой текст в прекрасный HTML. Также, у нас есть одни из лучших инструментов для отслеживания изменений в файлах. Почему мы должны забыть о них при написании документации? Этот рабочий процесс является мощным и знакомым разработчикам.


Небольшой пример
~~~~~~~~~~~~~

::

	Ресурсы
	---------

	* Онлайн документация: http://docs.writethedocs.org/
	* Конференция: http://conf.writethedocs.org/

Это текст отрендерится в заголовок и список под ним. URL станут ссылками автоматически. Текст легко писать, он читаем в виде простого текста и прекрасно превращается в HTML.

README
~~~~~~

Первые шаги в документации должны быть направлены в README. Сервисы по хранению исходников автоматически отрендерят ваш README в HTML, если вы укажете подходящее расширение. Также, README будет первой точкой соприкосновения большинства пользователей и вашего проекта. Хороший README пойдет на пользу вашему проекту.

Некоторые вообще `начинают проект с создания README`_

.. _начинают проект с создания README: http://tom.preston-werner.com/2010/08/23/readme-driven-development.html

.. _write:

Что писать
-------------

Теперь перейдем к деталям. Дайте пользователям всю необходимую информацию, но не более того.

Прежде всего, надо решить для кого вы пишите. По началу надо привлечь две аудитории:

* Пользователи
* Разработчики

Пользователи - это люди которые просто хотят использовать ваш код, и им не важно как он работает. Разработчики - люди которые хотят вносить изменения в ваш код.

Какие задачи решает ваш проект
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Многие люди придут в документацию в попытке разобраться, что такое ваш проект. Кто-то упомянул его в разговоре, или случайно нашли его в Гугле. Вы должны объяснить, что делает ваш проект и зачем существует. Fabric_ проделали отличную работу на эту тему.

.. _Fabric: http://docs.fabfile.org/

Небольшой пример кода
~~~~~~~~~~~~~~~~~~~~

Покажите небольшой пример, как обычно используется ваш проект. У Requests_ отличный пример.

.. _Requests: http://docs.python-requests.org/en/latest/index.html

Ссылки на код и баг-трекер
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Люди иногда любят поковыряться в коде. Может, они захотят исправить найденный баг (или неточность). Упростите жизнь людям, которые как-то хотят внести свой вклад. Мне кажется можно ориентироваться на `Python Guide`_.

.. _Python Guide: http://docs.python-guide.org/en/latest/index.html

Часто задаваемые вопросы (FAQ)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Многие люди задают одни и те же вопросы. Если это происходит постоянно, то, вероятно, надо изменить документацию или код, чтобы исправить ситуацию. Однако, всегда будут вопросы о вашем проекте, о вещах, которые нельзя изменить и пр. Запишите их и **поддерживайте актуальными**. FAQ обычно устаревает, но, когда всё сделано правильно, становится золотой жилой. Tastypie_ сделали очень круто с их сборником рецептов.

.. _Tastypie: http://django-tastypie.readthedocs.org/en/latest/cookbook.html

Как получить помощь
~~~~~~~~~~~~~~~~~~

Список рассылки? Канал IRC? Опишите как получить помощь и связаться с сообществом вокруг проекта. У Django_ сделано очень хорошо.

.. _Django: https://docs.djangoproject.com/en/1.8/faq/help



Информация для тех, кто хочет внести свой вклад
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

У людей есть определенные стандарты, по которым создаётся проект. Опишите их, чтобы люди, пишущие код, писали его по стандартам проекта. Круто сделано у `Open Comparison`_.

.. _Open Comparison: http://opencomparison.readthedocs.org/en/latest/contributing.html


Инструкции по установке
~~~~~~~~~~~~~~~~~~~~~~~~~

Как только люди решат использовать ваш проект, им надо будет как-то его получить и запустить. В идеале, инструкция по установке должна занимать пару строк для общего случая. Если необходимо, там же можно разместить ссылку на страницу с более подробной информацией. Я думаю у нас в `Read the Docs`_ получилось неплохо.

.. _Read the Docs: http://read-the-docs.readthedocs.org/en/latest/install.html


Лицензия проекта
~~~~~~~~~~~~~~~~~~~~~~~

BSD? MIT? GPL? Может для вас это неважно, но будет очень важно для людей, которые захотят использовать ваш код. Подумайте, чего вы хотите добиться лицензией и, пожалуйста, выберите одну из стандартных лицензий, которые широко используются в сети.

.. _template:


Дальнейшие шаги
----------

Мы знаем, что ваш проект ждёт успех, после того как вы последуете вышеизложенному гиду. Дальше можно почитать это пост о `поддержке опенсорсных проектов`_.

.. _поддержке опенсорсных проектов: https://medium.com/p/aaa2a5437d3a

Шаблон
--------

Простой шаблон для вашего ``README``, чтобы было с чего начать. Назовите файл ``README.md``, если хотите использовать Markdown, или ``README.rst``, если хотите использовать reStructuredText.
Больше инфы о них, можно найти в :ref:`замечании о разметке <markup_languages>`.

::

	$project
	========

	$project will solve your problem of where to start with documentation,
	by providing a basic explanation of how to do it easily.

	Look how easy it is to use:

	    import project
	    # Get your stuff done
	    project.do_stuff()

	Features
	--------

	- Be awesome
	- Make things faster

	Installation
	------------

	Install $project by running:

	    install project

	Contribute
	----------

	- Issue Tracker: github.com/$project/$project/issues
	- Source Code: github.com/$project/$project

	Support
	-------

	If you are having issues, please let us know.
	We have a mailing list located at: project@google-groups.com

	License
	-------

	The project is licensed under the BSD license.
